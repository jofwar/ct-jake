{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS Cloudformation script to deploy a VPC",
  "Parameters": {
    "VPCOctet": {
      "Description": "First two octets of the VPC",
      "Type": "String",
      "MinLength": "4",
      "MaxLength": "7",
      "AllowedPattern": "[0-9]{2,3}.[0-9]{1,3}",
      "ConstraintDescription": "must only be the first two octets without a trailing period"
    },
    "Environment": {
      "Description": "Environment to allocate costs to",
      "Type": "String",
      "MinLength": "3",
      "MaxLength": "255"
    },
    "DNSServers": {
      "Default": "AmazonProvidedDNS",
      "Type": "CommaDelimitedList",
      "Description": "Comma separated list of DNS server IP addresses"
    },
    "VPCTenancy": {
      "Default": "default",
      "Type": "String",
      "Description": "The tenancy of the instances launched in this VPC.  If dedicated, all instances will be dedicated tenancy regardless of the tenancy option you specify when you launch the instance",
      "AllowedValues": [
        "default",
        "dedicated"
      ]
    },
    "EnableVPCDNSSupport": {
      "Default": "true",
      "Type": "String",
      "Description": "Is Amazon DNS resolution supported for the VPC",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "AttachIGW": {
      "Default": "true",
      "Type": "String",
      "Description": "Boolean to attach an Internet Gateway to the VPC",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "EnableDNSHostnameSupport": {
      "Default": "true",
      "Type": "String",
      "Description": "Allow instances launched in the VPC get Amazon DNS hostnames",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "Region": {
      "Default": "SYD",
      "Type": "String",
      "Description": "Region to deploy to.  First 3 letters of region in capitals, e.g. SYD, IRE"
    },
    "AttachIGWtoVPCCondition": {
      "Fn::Equals": [
        {
          "Ref": "AttachIGW"
        },
        "true"
      ]
    }
  },
  "Mappings": {
    "SubnetConfig": {
      "VPC": {
        "CIDR": "0.0/16"
      },
      "WebA": {
        "CIDR": "255.128/25"
      },
      "WebB": {
        "CIDR": "255.0/25"
      }
    },
    "AvailabilityZones": {
      "ap-southeast-2": {
        "ZoneA": "ap-southeast-2a",
        "ZoneB": "ap-southeast-2b"
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "VPCOctet"
              },
              {
                "Fn::FindInMap": [
                  "SubnetConfig",
                  "VPC",
                  "CIDR"
                ]
              }
            ]
          ]
        },
        "InstanceTenancy": {
          "Ref": "VPCTenancy"
        },
        "EnableDnsSupport": {
          "Ref": "EnableVPCDNSSupport"
        },
        "EnableDnsHostnames": {
          "Ref": "EnableDNSHostnameSupport"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "VPC"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          }
        ]
      }
    },
    "SubnetWebA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "VPCOctet"
              },
              {
                "Fn::FindInMap": [
                  "SubnetConfig",
                  "WebA",
                  "CIDR"
                ]
              }
            ]
          ]
        },
        "AvailabilityZone": {
          "Fn::FindInMap": [
            "AvailabilityZones",
            {
              "Ref": "AWS::Region"
            },
            "ZoneA"
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Web A"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          }
        ]
      }
    },
    "SubnetWebB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "VPCOctet"
              },
              {
                "Fn::FindInMap": [
                  "SubnetConfig",
                  "WebB",
                  "CIDR"
                ]
              }
            ]
          ]
        },
        "AvailabilityZone": {
          "Fn::FindInMap": [
            "AvailabilityZones",
            {
              "Ref": "AWS::Region"
            },
            "ZoneB"
          ]
        },
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Web B"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          }
        ]
      }
    },
    "VPCIGW": {
      "Type": "AWS::EC2::InternetGateway",
      "Condition": "AttachIGWtoVPCCondition",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "IGW"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          }
        ]
      }
    },
    "AttachIGWtoVPC": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Condition": "AttachIGWtoVPCCondition",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "VPCIGW"
        }
      }
    },
    "VPCDHCP": {
      "Type": "AWS::EC2::DHCPOptions",
      "Properties": {
        "DomainName": {
          "Ref": "DomainName"
        },
        "DomainNameServers": {
          "Ref": "DNSServers"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "DHCP Option Set"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          }
        ]
      }
    },
    "AssocVPCDHCPtoVPC": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "DhcpOptionsId": {
          "Ref": "VPCDHCP"
        }
      }
    },
    "VPNGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Condition": "AttachVGWtoVPCCondition",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "VpnGatewayId": {
          "Ref": "VGWId"
        }
      }
    },
    "DefaultACL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Default"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          }
        ]
      }
    },
    "GatewayACL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Gateway"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          }
        ]
      }
    },
    "WebACL": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Web"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          }
        ]
      }
    },
    "GatewayRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Gateway"
          },
          {
            "Key": "Environment",
            "Value": {
              "Ref": "Environment"
            }
          }
        ]
      }
    },
    "WebRouteTable":{
      "Type":"AWS::EC2::RouteTable",
      "Properties":{
        "VpcId":{
          "Ref":"VPC"
        },
        "Tags":[
          {
            "Key":"Name",
            "Value":"Web"
          },
          {
            "Key":"Environment",
            "Value":{
              "Ref":"Environment"
            }
          }
        ]
      }
    },
    "SubnetWebARouteTableData" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn" : "WebRouteTable",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetWebA" },
        "RouteTableId" : { "Ref" : "WebRouteTable" }
      }
    },
    "SubnetWebBRouteTableData" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn" : "WebRouteTable",
      "Properties" : {
        "SubnetId" : { "Ref" : "SubnetWebB" },
        "RouteTableId" : { "Ref" : "WebRouteTable" }
      }
    },
   "AllowWebACLTCPegresstoVPC": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "VPCOctet"
              },
              {
                "Fn::FindInMap": [
                  "SubnetConfig",
                  "VPC",
                  "CIDR"
                ]
              }
            ]
          ]
        },
        "Egress": "true",
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "PortRange": {
          "From": "1",
          "To": "65535"
        },
        "NetworkAclId": {
          "Ref": "WebACL"
        }
      }
    },
    "AllowWebACLTCPingressfromVPC": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "VPCOctet"
              },
              {
                "Fn::FindInMap": [
                  "SubnetConfig",
                  "VPC",
                  "CIDR"
                ]
              }
            ]
          ]
        },
        "Protocol": "6",
        "Egress": "false",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "PortRange": {
          "From": "1",
          "To": "65535"
        },
        "NetworkAclId": {
          "Ref": "WebACL"
        }
      }
    },
    "AssocWebAtoWebACL": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "WebACL"
        },
        "SubnetId": {
          "Ref": "SubnetWebA"
        }
      }
    },
    "AssocWebBtoWebACL": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "WebACL"
        },
        "SubnetId": {
          "Ref": "SubnetWebB"
        }
      }
    },
    "GatewayRoutetoIGW": {
      "Type": "AWS::EC2::Route",
      "Condition": "AttachIGWtoVPCCondition",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "GatewayRouteTable"
        },
        "GatewayId": {
          "Ref": "VPCIGW"
        }
      },
      "DependsOn": "AttachIGWtoVPC"
    }
  },
  "Outputs": {
    "VPCID": {
      "Value": {
        "Ref": "VPC"
      },
      "Description": "ID of the VPC deployed"
    },
    "VPCCIDR": {
      "Value": {
        "Fn::Join": [
          ".",
          [
            {
              "Ref": "VPCOctet"
            },
            {
              "Fn::FindInMap": [
                "SubnetConfig",
                "VPC",
                "CIDR"
              ]
            }
          ]
        ]
      },
      "Description": "CIDR of the VPC deployed"
    },
    "IGWID": {
      "Condition": "AttachIGWtoVPCCondition",
      "Value": {
        "Ref": "VPCIGW"
      }
    },
    "WebSubnetIDs": {
      "Value": {
        "Fn::Join": [
          ",",
          [
            {
              "Ref": "SubnetWebA"
            },
            {
              "Ref": "SubnetWebB"
            }
          ]
        ]
      },
      "Description": "Comma separated list of Web subnets"
    }
  }
}

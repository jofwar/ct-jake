{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS Cloudformation script to deploy a VPC",
    "Parameters": {
        "VPCOctet": {
            "Description": "First two octets of the VPC",
            "Type": "String",
            "MinLength": "4",
            "MaxLength": "7",
            "AllowedPattern": "[0-9]{2,3}.[0-9]{1,3}",
            "ConstraintDescription": "must only be the first two octets without a trailing period"
        },
        "Environment": {
            "Description": "Environment to allocate costs to",
            "Type": "String",
            "MinLength": "3",
            "MaxLength": "255"
        },
        "VGWId": {
            "Type": "String",
            "Description": "ID of the VGW to attach to the VPC",
            "MaxLength": "12",
            "AllowedPattern": "vgw-[a-zA-Z0-9]{8}",
            "ConstraintDescription": "must be a valid VGW",
            "Default": "vgw-12345678"
        },
        "AttachVPN":{
            "Default":"false",
            "Description":"Boolean to attach VGW to create VPN",
            "Type":"String",
            "AllowedValues":[
                "true",
                "false"
            ]
        },
        "AttachIGW": {
            "Default": "true",
            "Type": "String",
            "Description": "Boolean to attach an Internet Gateway to the VPC",
            "AllowedValues": [
                "true",
                "false"
            ]
        },
        "DomainName": {
            "Type": "String",
            "Description": "Domain name"
        },
        "DNSServers": {
            "Default": "AmazonProvidedDNS",
            "Type": "CommaDelimitedList",
            "Description": "Comma separated list of DNS server IP addresses"
        },
        "NetbiosServers": {
            "Default": "",
            "Type": "CommaDelimitedList",
            "Description": "Comma separated list of Netbios Name Server IP addresses"
        },
        "NetbiosNode": {
            "Default": "2",
            "Type": "String",
            "Description": "Netbios Node Type value"
        },
        "VPCTenancy": {
            "Default": "default",
            "Type": "String",
            "Description": "The tenancy of the instances launched in this VPC.  If dedicated, all instances will be dedicated tenancy regardless of the tenancy option you specify when you launch the instance",
            "AllowedValues": [
                "default",
                "dedicated"
            ]
        },
        "EnableVPCDNSSupport": {
            "Default": "true",
            "Type": "String",
            "Description": "Is Amazon DNS resolution supported for the VPC",
            "AllowedValues": [
                "true",
                "false"
            ]
        },
        "EnableDNSHostnameSupport": {
            "Default": "true",
            "Type": "String",
            "Description": "Allow instances launched in the VPC get Amazon DNS hostnames",
            "AllowedValues": [
                "true",
                "false"
            ]
        },
        "Region": {
            "Default": "SYD",
            "Type": "String",
            "Description": "Region to deploy to.  First 3 letters of region in capitals, e.g. SYD, IRE"
        }
    },
    "Conditions": {
        "AttachVGWtoVPCCondition": {
            "Fn::Equals": [
                {
                    "Ref": "AttachVPN"
                },
                "true"
            ]
        },
        "AttachIGWtoVPCCondition": {
            "Fn::Equals": [
                {
                    "Ref": "AttachIGW"
                },
                "true"
            ]
        }
    },
    "Mappings": {
        "SubnetConfig": {
            "VPC": {
                "CIDR": "0.0/16"
            },
            "WebA": {
                "CIDR": "2.0/24"
            },
            "WebB": {
                "CIDR": "3.0/24"
            },
            "SecurityA": {
                "CIDR": "254.0/25"
            },
            "SecurityB": {
                "CIDR": "254.128/25"
            },
            "DataA": {
                "CIDR": "6.0/24"
            },
            "DataB": {
                "CIDR": "7.0/24"
            }
        },
        "AvailabilityZones": {
            "ap-southeast-2": {
                "ZoneA": "ap-southeast-2a",
                "ZoneB": "ap-southeast-2b"
            },
            "eu-west-1": {
                "ZoneA": "eu-west-1a",
                "ZoneB": "eu-west-1b"
            }
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "VPCOctet"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "VPC",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "InstanceTenancy": {
                    "Ref": "VPCTenancy"
                },
                "EnableDnsSupport": {
                    "Ref": "EnableVPCDNSSupport"
                },
                "EnableDnsHostnames": {
                    "Ref": "EnableDNSHostnameSupport"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "VPC"
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "Environment"
                        }
                    }
                ]
            }
        },
        "SubnetWebA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "VPCOctet"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "WebA",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "AvailabilityZones",
                        {
                            "Ref": "AWS::Region"
                        },
                        "ZoneA"
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Web A"
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "Environment"
                        }
                    }
                ]
            }
        },
        "SubnetWebB": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "VPCOctet"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "WebB",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "AvailabilityZones",
                        {
                            "Ref": "AWS::Region"
                        },
                        "ZoneB"
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Web B"
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "Environment"
                        }
                    }
                ]
            }
        },
        "SubnetSecurityA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "VPCOctet"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "SecurityA",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "AvailabilityZones",
                        {
                            "Ref": "AWS::Region"
                        },
                        "ZoneA"
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Security A"
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "Environment"
                        }
                    }
                ]
            }
        },
        "SubnetSecurityB": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "VPCOctet"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "SecurityB",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "AvailabilityZones",
                        {
                            "Ref": "AWS::Region"
                        },
                        "ZoneB"
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Security B"
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "Environment"
                        }
                    }
                ]
            }
        },
        "SubnetDataA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "VPCOctet"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "DataA",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "AvailabilityZones",
                        {
                            "Ref": "AWS::Region"
                        },
                        "ZoneA"
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Data A"
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "Environment"
                        }
                    }
                ]
            }
        },
        "SubnetDataB": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "VPCOctet"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "DataB",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "AvailabilityZone": {
                    "Fn::FindInMap": [
                        "AvailabilityZones",
                        {
                            "Ref": "AWS::Region"
                        },
                        "ZoneB"
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Data B"
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "Environment"
                        }
                    }
                ]
            }
        },
        "VPCIGW": {
            "Type": "AWS::EC2::InternetGateway",
            "Condition": "AttachIGWtoVPCCondition",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "IGW"
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "Environment"
                        }
                    }
                ]
            }
        },
        "AttachIGWtoVPC": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Condition": "AttachIGWtoVPCCondition",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "VPCIGW"
                }
            }
        },
        "VPCDHCP": {
            "Type": "AWS::EC2::DHCPOptions",
            "Properties": {
                "DomainName": {
                    "Ref": "DomainName"
                },
                "DomainNameServers": {
                    "Ref": "DNSServers"
                },
                "NetbiosNameServers": {
                    "Ref": "NetbiosServers"
                },
                "NetbiosNodeType": {
                    "Ref": "NetbiosNode"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DHCP Option Set"
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "Environment"
                        }
                    }
                ]
            }
        },
        "AssocVPCDHCPtoVPC": {
            "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "DhcpOptionsId": {
                    "Ref": "VPCDHCP"
                }
            }
        },
        "VPNGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Condition": "AttachVGWtoVPCCondition",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "VpnGatewayId": {
                    "Ref": "VGWId"
                }
            }
        },
        "DataACL": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "RDBMS"
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "Environment"
                        }
                    }
                ]
            }
        },
        "DefaultACL": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Default"
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "Environment"
                        }
                    }
                ]
            }
        },
        "GatewayACL": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Gateway"
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "Environment"
                        }
                    }
                ]
            }
        },
        "SecurityACL": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Security"
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "Environment"
                        }
                    }
                ]
            }
        },
        "WebACL": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Web"
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "Environment"
                        }
                    }
                ]
            }
        },
        "GatewayRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Gateway"
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "Environment"
                        }
                    }
                ]
            }
        },
        "AllowDataACLTCPegresstoVPC": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "VPCOctet"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "VPC",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Egress": true,
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "100",
                "PortRange": {
                    "From": "1",
                    "To": "65535"
                },
                "NetworkAclId": {
                    "Ref": "DataACL"
                }
            }
        },
        "AllowDataACLUDPegresstoVPC": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "VPCOctet"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "VPC",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Egress": true,
                "Protocol": "17",
                "RuleAction": "allow",
                "RuleNumber": "110",
                "PortRange": {
                    "From": "1",
                    "To": "65535"
                },
                "NetworkAclId": {
                    "Ref": "DataACL"
                }
            }
        },
        "AllowDataACLegresstoWeb": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": true,
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "160",
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "NetworkAclId": {
                    "Ref": "DataACL"
                }
            }
        },
        "AllowDataACLegresstoSecureWeb": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": true,
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "170",
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "NetworkAclId": {
                    "Ref": "DataACL"
                }
            }
        },
        "AllowDataACLTCPingressFromVPC": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "VPCOctet"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "VPC",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "100",
                "PortRange": {
                    "From": "1",
                    "To": "65535"
                },
                "NetworkAclId": {
                    "Ref": "DataACL"
                }
            }
        },
        "AllowDataACLUDPingressFromVPC": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "VPCOctet"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "VPC",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Protocol": "17",
                "RuleAction": "allow",
                "RuleNumber": "110",
                "PortRange": {
                    "From": "1",
                    "To": "65535"
                },
                "NetworkAclId": {
                    "Ref": "DataACL"
                }
            }
        },
        "AllowDataACLingressReturnFromWeb": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "160",
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "NetworkAclId": {
                    "Ref": "DataACL"
                }
            }
        },
        "AllowSecurityACLTCPegresstoVPC": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "VPCOctet"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "VPC",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Egress": true,
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "100",
                "PortRange": {
                    "From": "1",
                    "To": "65535"
                },
                "NetworkAclId": {
                    "Ref": "SecurityACL"
                }
            }
        },
        "AllowSecurityACLUDPegresstoVPC": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "VPCOctet"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "VPC",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Egress": true,
                "Protocol": "17",
                "RuleAction": "allow",
                "RuleNumber": "110",
                "PortRange": {
                    "From": "1",
                    "To": "65535"
                },
                "NetworkAclId": {
                    "Ref": "SecurityACL"
                }
            }
        },
        "AllowSecurityACLegresstoWeb": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": true,
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "160",
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "NetworkAclId": {
                    "Ref": "SecurityACL"
                }
            }
        },
        "AllowSecurityACLegresstoSecureWeb": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": true,
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "170",
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "NetworkAclId": {
                    "Ref": "SecurityACL"
                }
            }
        },
        "AllowSecurityACLTCPingressFromVPC": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "VPCOctet"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "VPC",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "100",
                "PortRange": {
                    "From": "1",
                    "To": "65535"
                },
                "NetworkAclId": {
                    "Ref": "SecurityACL"
                }
            }
        },
        "AllowSecurityACLUDPingressFromVPC": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "VPCOctet"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "VPC",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Protocol": "17",
                "RuleAction": "allow",
                "RuleNumber": "110",
                "PortRange": {
                    "From": "1",
                    "To": "65535"
                },
                "NetworkAclId": {
                    "Ref": "SecurityACL"
                }
            }
        },
        "AllowSecurityACLingressReturnFromWeb": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "160",
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "NetworkAclId": {
                    "Ref": "SecurityACL"
                }
            }
        },
        "DenyDefaultACLegressAll": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": true,
                "Protocol": "-1",
                "RuleAction": "deny",
                "RuleNumber": "100",
                "NetworkAclId": {
                    "Ref": "DefaultACL"
                }
            }
        },
        "DenyDefaultACLingressAll": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Protocol": "-1",
                "RuleAction": "deny",
                "RuleNumber": "100",
                "NetworkAclId": {
                    "Ref": "DefaultACL"
                }
            }
        },
        "AllowWebACLTCPegresstoVPC": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "VPCOctet"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "VPC",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Egress": "true",
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "100",
                "PortRange": {
                    "From": "1",
                    "To": "65535"
                },
                "NetworkAclId": {
                    "Ref": "WebACL"
                }
            }
        },
        "AllowWebACLUDPegresstoVPC": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "VPCOctet"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "VPC",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Egress": "true",
                "Protocol": "17",
                "RuleAction": "allow",
                "RuleNumber": "110",
                "PortRange": {
                    "From": "1",
                    "To": "65535"
                },
                "NetworkAclId": {
                    "Ref": "WebACL"
                }
            }
        },
        "AllowWebACLegresstoWeb": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "160",
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "NetworkAclId": {
                    "Ref": "WebACL"
                }
            }
        },
        "AllowWebACLegresstoSecureWeb": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "170",
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "NetworkAclId": {
                    "Ref": "WebACL"
                }
            }
        },
        "AllowWebACLegressReturnToWeb": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "Protocol": "6",
                "RuleAction": "allow",
                "RuleNumber": "180",
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "NetworkAclId": {
                    "Ref": "WebACL"
                }
            }
        },
        "AllowWebACLTCPingressfromVPC": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "VPCOctet"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "VPC",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Protocol": "6",
                "Egress": "false",
                "RuleAction": "allow",
                "RuleNumber": "100",
                "PortRange": {
                    "From": "1",
                    "To": "65535"
                },
                "NetworkAclId": {
                    "Ref": "WebACL"
                }
            }
        },
        "AllowWebACLUDPingressfromVPC": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": {
                    "Fn::Join": [
                        ".",
                        [
                            {
                                "Ref": "VPCOctet"
                            },
                            {
                                "Fn::FindInMap": [
                                    "SubnetConfig",
                                    "VPC",
                                    "CIDR"
                                ]
                            }
                        ]
                    ]
                },
                "Protocol": "17",
                "Egress": "false",
                "RuleAction": "allow",
                "RuleNumber": "110",
                "PortRange": {
                    "From": "1",
                    "To": "65535"
                },
                "NetworkAclId": {
                    "Ref": "WebACL"
                }
            }
        },
        "AllowWebACLingressReturnFromWeb": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Protocol": "6",
                "Egress": "false",
                "RuleAction": "allow",
                "RuleNumber": "160",
                "PortRange": {
                    "From": "1024",
                    "To": "65535"
                },
                "NetworkAclId": {
                    "Ref": "WebACL"
                }
            }
        },
        "AllowWebACLingressFromWeb": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Protocol": "6",
                "Egress": "false",
                "RuleAction": "allow",
                "RuleNumber": "170",
                "PortRange": {
                    "From": "80",
                    "To": "80"
                },
                "NetworkAclId": {
                    "Ref": "WebACL"
                }
            }
        },
        "AllowWebACLingressFromSecureWeb": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Protocol": "6",
                "Egress": "false",
                "RuleAction": "allow",
                "RuleNumber": "180",
                "PortRange": {
                    "From": "443",
                    "To": "443"
                },
                "NetworkAclId": {
                    "Ref": "WebACL"
                }
            }
        },
        "AssocDataBtoDataACL": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "DataACL"
                },
                "SubnetId": {
                    "Ref": "SubnetDataB"
                }
            }
        },
        "AssocDataAtoDataACL": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "DataACL"
                },
                "SubnetId": {
                    "Ref": "SubnetDataA"
                }
            }
        },
        "AssocSubnetWebBtoWebACL": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "WebACL"
                },
                "SubnetId": {
                    "Ref": "SubnetWebB"
                }
            }
        },
        "AssocSubnetWebAtoWebACL": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "WebACL"
                },
                "SubnetId": {
                    "Ref": "SubnetWebA"
                }
            }
        },
        "GatewayRoutetoIGW": {
            "Type": "AWS::EC2::Route",
            "Condition": "AttachIGWtoVPCCondition",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": {
                    "Ref": "GatewayRouteTable"
                },
                "GatewayId": {
                    "Ref": "VPCIGW"
                }
            },
            "DependsOn": "AttachIGWtoVPC"
        },
        "VGWRoutePropagationtoGatewayRouteTable": {
            "Type": "AWS::EC2::VPNGatewayRoutePropagation",
            "Condition": "AttachVGWtoVPCCondition",
            "Properties": {
                "RouteTableIds": [
                    {
                        "Ref": "GatewayRouteTable"
                    }
                ],
                "VpnGatewayId": {
                    "Ref": "VGWId"
                }
            },
            "DependsOn": [
                "GatewayRouteTable",
                "VPNGatewayAttachment"
            ]
        }
    },
    "Outputs": {
        "VPCID": {
            "Value": {
                "Ref": "VPC"
            },
            "Description": "ID of the VPC deployed"
        },
        "VPCCIDR": {
            "Value": {
                "Fn::Join": [
                    ".",
                    [
                        {
                            "Ref": "VPCOctet"
                        },
                        {
                            "Fn::FindInMap": [
                                "SubnetConfig",
                                "VPC",
                                "CIDR"
                            ]
                        }
                    ]
                ]
            },
            "Description": "CIDR of the VPC deployed"
        },
        "IGWID": {
            "Condition": "AttachIGWtoVPCCondition",
            "Value": {
                "Ref": "VPCIGW"
            }
        },
        "DataSubnetIDs": {
            "Value": {
                "Fn::Join": [
                    ",",
                    [
                        {
                            "Ref": "SubnetDataA"
                        },
                        {
                            "Ref": "SubnetDataB"
                        }
                    ]
                ]
            },
            "Description": "Comma separated list of Data subnets"
        },
        "SecuritySubnetIDs": {
            "Value": {
                "Fn::Join": [
                    ",",
                    [
                        {
                            "Ref": "SubnetSecurityA"
                        },
                        {
                            "Ref": "SubnetSecurityB"
                        }
                    ]
                ]
            },
            "Description": "Comma separated list of Application subnets"
        },
        "WebSubnetIDs": {
            "Value": {
                "Fn::Join": [
                    ",",
                    [
                        {
                            "Ref": "SubnetWebA"
                        },
                        {
                            "Ref": "SubnetWebB"
                        }
                    ]
                ]
            },
            "Description": "Comma separated list of Web subnets"
        }
    }
}

{
    "AWSTemplateFormatVersion":"2010-09-09",
    "Description":"AWS CloudFormation Sample Template LAMP_Multi_AZ: Create a highly available, scalable LAMP stack with an Amazon RDS database instance for the backend data store. This template demonstrates using the AWS CloudFormation bootstrap scripts to install the packages and files necessary to deploy the Apache web server and PHP at instance launch time. **WARNING** This template creates one or more Amazon EC2 instances, an Elastic Load Balancer and an Amazon RDS DB instance. You will be billed for the AWS resources used if you create a stack from this template.",
    "Parameters":{
        "KeyName":{
            "Description":"Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type":"AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription":"must be the name of an existing EC2 KeyPair."
        },
        "NATName":{
            "Default":"myDatabase",
            "Description":"MySQL database name",
            "Type":"String",
            "MinLength":"1",
            "MaxLength":"64",
            "AllowedPattern":"[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription":"must begin with a letter and contain only alphanumeric characters."
        },
        "NATAllocatedStorage":{
            "Default":"5",
            "Description":"The size of the database (Gb)",
            "Type":"Number",
            "MinValue":"5",
            "MaxValue":"1024",
            "ConstraintDescription":"must be between 5 and 1024Gb."
        },
        "NATInstanceClass":{
            "Description":"The database instance type",
            "Type":"String",
            "Default":"t2.micro",
            "AllowedValues":[
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m3.medium",
                "m3.large",
                "m4.large"
            ]
            ,
            "ConstraintDescription":"must select a valid NAT instance type."
        },
        "Environment":{
          "Description":"Environment to allocate costs to",
          "Type":"String",
          "MinLength":"3",
          "MaxLength":"255"
        }
    },
    "Mappings":{
        "AWSInstanceType2Arch":{
            "t2.micro":{
                "Arch":"HVM64"
            },
            "t2.small":{
                "Arch":"HVM64"
            },
            "t2.medium":{
                "Arch":"HVM64"
            },
            "t2.large":{
                "Arch":"HVM64"
            },
            "m3.medium":{
                "Arch":"HVM64"
            },
            "m3.large":{
                "Arch":"HVM64"
            },
            "m4.large":{
                "Arch":"HVM64"
            }
        },
        "AWSRegionArch2AMI":{
            "ap-southeast-1":{
                "PV64":"ami-34bd7a57",
                "HVM64":"ami-c9b572aa",
                "HVMG2":"ami-5a15d239"
            },
            "ap-southeast-2":{
                "PV64":"ami-ced887ad",
                "HVM64":"ami-48d38c2b",
                "HVMG2":"ami-0c1a446f"
            }
        }
    },
    "Conditions":{
        "Is-EC2-VPC":{
            "Fn::Or":[
                {
                    "Fn::Equals":[
                        {
                            "Ref":"AWS::Region"
                        },
                        "eu-central-1"
                    ]
                },
                {
                    "Fn::Equals":[
                        {
                            "Ref":"AWS::Region"
                        },
                        "cn-north-1"
                    ]
                },
                {
                    "Fn::Equals":[
                        {
                            "Ref":"AWS::Region"
                        },
                        "ap-northeast-2"
                    ]
                }
            ]
        },
        "Is-EC2-Classic":{
            "Fn::Not":[
                {
                    "Condition":"Is-EC2-VPC"
                }
            ]
        }
    },
    "Resources":{
        "ElasticLoadBalancer":{
            "Type":"AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties":{
                "CrossZone":"true",
                "AvailabilityZones":{
                    "Fn::GetAZs":""
                },
                "LBCookieStickinessPolicy":[
                    {
                        "PolicyName":"CookieBasedPolicy",
                        "CookieExpirationPeriod":"30"
                    }
                ],
                "Listeners":[
                    {
                        "LoadBalancerPort":"80",
                        "InstancePort":"80",
                        "Protocol":"HTTP",
                        "PolicyNames":[
                            "CookieBasedPolicy"
                        ]
                    }
                ],
                "HealthCheck":{
                    "Target":"HTTP:80/",
                    "HealthyThreshold":"2",
                    "UnhealthyThreshold":"5",
                    "Interval":"10",
                    "Timeout":"5"
                },
                "Tags":[
                  {
                    "Key":"Name",
                    "Value":"WebLoadBalancer"
                  },
                  {
                    "Key":"Environment",
                    "Value":{
                      "Ref":"Environment"
                    }
                  }
                ]
            }
        },
        "WebServerGroup":{
            "Type":"AWS::AutoScaling::AutoScalingGroup",
            "Properties":{
                "AvailabilityZones":{
                    "Fn::GetAZs":""
                },
                "LaunchConfigurationName":{
                    "Ref":"LaunchConfig"
                },
                "MinSize":"1",
                "MaxSize":"5",
                "DesiredCapacity":{
                    "Ref":"WebServerCapacity"
                },
                "LoadBalancerNames":[
                    {
                        "Ref":"ElasticLoadBalancer"
                    }
                ],
                "Tags":[
                  {
                    "Key":"Name",
                    "Value":"Web Server",
                    "PropagateAtLaunch" : "true"
                  },
                  {
                    "Key":"Environment",
                    "Value":{
                      "Ref":"Environment"
                    },
                    "PropagateAtLaunch" : "true"
                  }
                ]
            },
            "CreationPolicy":{
                "ResourceSignal":{
                    "Timeout":"PT5M",
                    "Count":{
                        "Ref":"WebServerCapacity"
                    }
                }
            },
            "UpdatePolicy":{
                "AutoScalingRollingUpdate":{
                    "MinInstancesInService":"1",
                    "MaxBatchSize":"1",
                    "PauseTime":"PT15M",
                    "WaitOnResourceSignals":"true"
                }
            }
        },
        "WebServerSecurityGroup":{
            "Type":"AWS::EC2::SecurityGroup",
            "Properties":{
                "GroupDescription":"Enable HTTP access via port 80 locked down to the ELB and SSH access",
                "SecurityGroupIngress":[
                    {
                        "IpProtocol":"tcp",
                        "FromPort":"80",
                        "ToPort":"80",
                        "SourceSecurityGroupOwnerId":{
                            "Fn::GetAtt":[
                                "ElasticLoadBalancer",
                                "SourceSecurityGroup.OwnerAlias"
                            ]
                        },
                        "SourceSecurityGroupName":{
                            "Fn::GetAtt":[
                                "ElasticLoadBalancer",
                                "SourceSecurityGroup.GroupName"
                            ]
                        }
                    },
                    {
                        "IpProtocol":"tcp",
                        "FromPort":"22",
                        "ToPort":"22",
                        "CidrIp":"0.0.0.0/0"
                    }
                ]
            }
        },
        "DBEC2SecurityGroup":{
            "Type":"AWS::EC2::SecurityGroup",
            "Condition":"Is-EC2-VPC",
            "Properties":{
                "GroupDescription":"Open database for access",
                "SecurityGroupIngress":[
                    {
                        "IpProtocol":"tcp",
                        "FromPort":"3306",
                        "ToPort":"3306",
                        "SourceSecurityGroupName":{
                            "Ref":"WebServerSecurityGroup"
                        }
                    }
                ]
            }
        },
        "DBSecurityGroup":{
            "Type":"AWS::RDS::DBSecurityGroup",
            "Condition":"Is-EC2-Classic",
            "Properties":{
                "DBSecurityGroupIngress":{
                    "EC2SecurityGroupName":{
                        "Ref":"WebServerSecurityGroup"
                    }
                },
                "GroupDescription":"database access"
            }
        },
        "MySQLDatabase":{
            "Type":"AWS::RDS::DBInstance",
            "Properties":{
                "Engine":"MySQL",
                "DBName":{
                    "Ref":"DBName"
                },
                "MultiAZ":{
                    "Ref":"MultiAZDatabase"
                },
                "MasterUsername":{
                    "Ref":"DBUser"
                },
                "MasterUserPassword":{
                    "Ref":"DBPassword"
                },
                "DBInstanceClass":{
                    "Ref":"DBInstanceClass"
                },
                "AllocatedStorage":{
                    "Ref":"DBAllocatedStorage"
                },
                "VPCSecurityGroups":{
                    "Fn::If":[
                        "Is-EC2-VPC",
                        [
                            {
                                "Fn::GetAtt":[
                                    "DBEC2SecurityGroup",
                                    "GroupId"
                                ]
                            }
                        ],
                        {
                            "Ref":"AWS::NoValue"
                        }
                    ]
                },
                "DBSecurityGroups":{
                    "Fn::If":[
                        "Is-EC2-Classic",
                        [
                            {
                                "Ref":"DBSecurityGroup"
                            }
                        ],
                        {
                            "Ref":"AWS::NoValue"
                        }
                    ]
                }
            }
        }
    },
    "Outputs":{
        "WebsiteURL":{
            "Description":"URL for newly created LAMP stack",
            "Value":{
                "Fn::Join":[
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt":[
                                "ElasticLoadBalancer",
                                "DNSName"
                            ]
                        }
                    ]
                ]
            }
        }
    }
}